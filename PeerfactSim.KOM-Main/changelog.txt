======================================
2011-05-06 PeerfactSim.KOM v4.0
====================================== 

This the next version of PeerfactSim.KOM, containing new models to simulate for the application-, overlay-, and network-layer.
Additionally, we tried to improve the performance to run larger simulations with better memory consumption and short simulation duration.
The license of the whole project was shifted from the GPL v2 to GPL v3. You will find a short abstract of the license in each file, while LICENSE in the root folder contains the complete text of the GPL v3.

For questions or problems please write to the newly create email address <peerfact@kom.tu-darmstadt.de>

Part1: New models
======================================
Application Layer: On the application layer, the simulator consists of a simple filesharing application. In this application peers can store references to files and can them lookup, based on a chosen probability function.
Service Layer: We introduced a complete new layer, which is inbetween the application and overlay layer. At this layer, we included a tree-based monitoring solution SkyNet.KOM, which can already manage the overlay (currently only Chord). In addition, the Service Layer consists of a gossip-based monitoring solution.
Overlay Layer: At the overlay layer, we started to implement a new class of overlays called Information Dissemination Overlays (IDOs). This class already includes VON and pSense. Besides this class, a dimensional version of CAN was added to the class of DHT-overlays.
Network Layer: At the network layer, we designed the so-called Modular Network Layer, which allows for a modular construction of the Network Layer based on different strategies. These strategies consist of aspects, such as packet loss, packet sizing, latency, jitter and so on. Existing implementations of these strategies contain the concepts from the SimpleNetLayer- and GNPNetLayer-Model.
Utilities:
(1) The xml-files for the configuration of a simulation can now be configured by including other configuration files. This means that we can include other xml-files, which define e.g. the monitoring-part for a simulation, in new configuration files. 
(2) Simulations that are run on systems with screens enable the live-monitoring of executed simulations through a separate monitoring window. In addition, the configuration-file for a simulation can be chosen through a GUI. Just use de.tud.kom.p2psim.GUIRunner. For headless systems use de.tud.kom.p2psim.SimulatorRunner.

Part2: Improved models:
======================================
Overlay Layer:
(1) Chord was modified to allow for a better performance in scenarios with churn, e.g., you can now specify how many predecessor and successors are stored per peer. In addition the analyzer de.tud.kom.p2psim.impl.overlay.dht.chord2.analyzer.ChordStructureAnalyzer allows to trace the structure of the during a topology. Just add this analyzer to the monitoring-element within a configuration-file.
(2) Pastry was modified and now applies to the new simulator structure, which was already created during the last update of the simulator.
(3) Gnutella 0.6 and GIA share now a common subset of implementing classes, as parts of these two unstructured overlays are similar.

Part3: Improved Performance:
======================================
(1) By a static assignemt of the different TransInfo-classes, memory consumption was considerably improved
(2) The Modular Network Layer uses its own relational database model, which improves the memory consumption and increases the simulation speed, when simulating underlay models that rely on measurements to calculate latency, message loss etc.

======================================
2007-12-04 PeerfactSim.KOM v3.0
====================================== 
This is a new refactored version of the simulator, which is officially called 3.0.
Please read this changelog information, especially if you encounter
any troubles.

If something is unclear about it (or some info seems to be missing) please write to the mailinglist peerfactsim@kom.tu-darmstadt.de

The refactored version of the simulator was developed in the branch
Refactoring_Messages_Operations_Churn, it means that after an update you still can go back to the previous simulator version called: Root_Refactoring_Messages_Operations_Churn


Part 1: Small Conceptional Changes
======================================
A) Usage of Java Generics (where appropriate)
B) Splitting of event handling in listeners (mainly for requests and status) and callbacks for operations and messages (in order to emulate the request-reply behavior in asynchronous processing)
C) added Churn
D) refactored the package structure: 
    D1) Simulator runner class is now located in p2psim package
E) removed most of the singletons: now there is one main singleton - Simulator.class, which acts as facade and offers access to most required functions (like scheduling, virtual time etc.)
F) Virtual time is now divided in units (seconds, milliseconds etc.) - you can access those via the Simulator's constants
G) This time can now also be specified in the config files, e.g. now you say "10s" for 10 seconds delay which is the 
same as calling "10*Simulator.SECOND_UNIT" in the program code. 

PART 2: Functional changes
==========================================
1) Dummy overlay was deleted, now the only example (or reference) overlay will be the dht.centralized, where you can see how to work with layers, operations and timeouts properly 

2) We tried to refactor the structure of the JUnit tests as much as possible, mainly to remove duplicate codes. Now there is a quite comfortable Test hierarchy (starting with the SimulatorTest) offering comfortable functionality for your own tests

Obstacles:
1) the main issue should be that many classes changed their packages, where renamed or even merged together. This means that many imports will become wrong and your compiler may show a lot of errors due to wrong import declarations.
There are several ways to handle this efficient.
    a) For each class use the "Organize imports" function of Eclipse, accessible via the Ctrl-Shift-O shortcut, which will fix them automatically or ask you to select one for ambiqious imports
    b) Simultaneous Search-and-Replace for the whole project. This function is not very comfortable in Eclipse so if you know a nice tool to do this - please share your knowledge with us :) 
    In Eclipse you can do this via "Search"->"File", here you can insert the wrong line, e.g. "import de.tud.p2psim.OLDPACKAGE.FOO" as the search string, set file pattern to *.java, the scope to "Choose"->Your project name and press "Replace". In the appearing dialog you can put the line to replace with, e.g "import de.tud.p2psim.NEWPACKAGE.NEWNAME_OF_FOO" and then to select "Replace All" or to go throgh the files and decide what to do via "Replace", "Skip" etc.
    The bad thing about this way is that you have to do this for each replacement line individually. A nice tool would be able to read from a file with the replacement mappings and perform them automatically. Yes, we could write a script or even a java program to do this, so if you have time to do this, please, share your code with us. 
    
Here we try to summarize all renamings and movements of classes and interfaces for your convinience (you can see them by your own if you go to the Team->Synchronize View of the Simulator project)
   
	* Basics about de.tud.kom.p2psim.api.common.OperationCallback:
		Operation callback is strongly connected to a specific operation and is used to inform the caller of this operation 
		about operation's finish status. In a real-world java programm you would write something like 
		Foo result = someObject.doSomething(params); As this would not work in a discrete event-based simulator 
		(you have to pass the control to the simulator in order to get messages sent through the network) 
		you have to do something like: 
		
		someObject.doSomething(params, new OperationCallback(){ 
			
			public void calledOperationFailed(Operation op){
 					processResult((Foo) op.getResult());
 			}
 
 		   public void calledOperationSucceeded(Operation op){
 					processFailure();
 			}
 		} 	
 		So what happens here is actually is making the operation call asynchronous.
 		
 		
	* Constructing operations without the need of an operation callback:
 		It might sometimes be the case that no operation callback is necessary whilst a callback is requiered 
 		when constructing  operations extending the de.tud.kom.p2psim.impl.common.AbstractOperation class.
 		In this case, it is recommended to use de.tud.kom.p2psim.impl.common.Operations.EMPTY_CALLBACK as an
 		argument when constructing a new operation instance. Example:
 		
 		public class WithoutCallbackOperation extends AbstractOperation<Foo> {
			public ServerJoinOperation(Foo foo, OperationCallback callback) {
				super(foo, callback);
			}	
 		...	
 		}
 		
 		Operation example = new WithoutCallbackOperation(foo, Operations.EMPTY_CALLBACK);
 	
	* Package de.tud.kom.p2psim.api.transport: 
        Most important facts (for further details, see below which files exchange exactly)
    	- MessageManager has been renamed to TransLayer
    	- TransportAddress has been renamed to TransInfo
    	- ServiceCategory has been renamed to TransProtocol
    	- MessageReceiver has been renamed and split into TransMessageListener and TransMessageCallback 
 
        
		* de.tud.kom.p2psim.api.transport.TransProtocol: 
     	Currently, we are supporting one transport layer protocols: UDP. This protocols can be
     	selected using the appropriate enum type. 
     	
	* Messages in PeerfactSim:
        It is important to notice that the implementation of messaging has been changed by this release. 
        The message interface can be found in de.tud.kom.p2psim.api.common.Message. This interface defines 
        the root interface of all messages that are exchanged between the different components of PeerfactSim. 
        It consists of two methods: getSize() and getPayload(). All submessages (interfaces) must inherit from 
        this interface. Further, the following has been changed:
        	- The interface de.tud.kom.p2psim.api.overlay.OverlayMessage and its base implementation does not 
        	  exist anymore. Instead an abstract overlay message is provided in 
        	  de.tud.kom.p2psim.impl.overlay.AbstractOverlayMessage
        	- OverlayMessageCategories are deprecated and have been deleted. Instead,it is in the responsibility 
        	  to create such categories depending on a specific usage scenario. 
         	
	* Churn:
		Since this release, it is possible to activate churn in our simulation frame work. All important 
		interfaces can be found in package de.tud.kom.p2psim.api.churn. Further, it is possible to specify
		a particular "ChurnModel" using the xml-description file of our simulator: 
	  
	  	  <HostBuilder class=...>
                  ...
          </HostBuilder>
		   
		  ...
		  
		  <ChurnGenerator class="de.tud.kom.p2psim.impl.churn.DefaultChurnGenerator" start="10m" stop="30m">
	            <ChurnModel class="de.tud.kom.p2psim.impl.churn.StaticChurnModel"/>
	      </ChurnGenerator>  
	      
	    Please notice that the ChurnGenerator component has to be placed below the HostBuilder component as the
	    host objects have to be created before the churn generator is allowed to access them. In addition to
	    this, the start and stop time have to be specified (see class documentation). 
	    
	* Monitoring:
		In order to evaluate and observe results of simulation runs, "analyzers" 
		(de.tud.kom.p2psim.api.analyzer.Analyzer) have to be installed by a component which implements 
		the de.tud.kom.p2psim.api.common.Monitor interface. A default implementation is provided 
		in de.tud.kom.p2psim.impl.common. Each specific analyzer has the possibility
		to implement different component analyzers such as the NetAnalyzer in order to receive component
		specific events. Thus, for example, the sending/receiving/dropping of messages at the
		NetWrapper of each host can be traced and evaluated later on. Several analyzers per simulation
		are allowed and can be specified in the xml-description file as follows:
		
		<Monitor class="de.tud.kom.p2psim.impl.monitoring.DefaultMonitor" start="20m" stop="30m">
              <Analyzer class="de.tud.kom.p2psim.impl.monitoring.NetWorkloadAnalyzer"/>
              <Analyzer class="..."/>
              ...
      	</Monitor> 
      	
      	In addition to this, the start and stop time of monitoring process have to be specified (see class documentation) 
 		
	* Updated GPL license in all files
	
	* Removed general connect/disconnect methods (now they are layer specific)
		** removed them from the Component interface
		
	* Unified component factories using generics
		** there is one basic factory interface ComponentFactory<T> where T is the concrete type of components
		** removed ApplicationFactory, OverlayFactory, NetworkFactory interfaces		** removed them from the Component interface
				** removed them from the Component interface

	* Main Simulator Class and other singletons:
		* The Simulator is run now via de.tud.kom.p2psim.SimulatorRunner
		* Simulator-Class was moved to impl and is now accessible via getInstance() or other
			static methods -> Facade Design Pattern (and Singleton too)
		* DefaultSimulator is merged with the Simulator class
		* Scheduler is not accessible from the outside any more! All methods can be found in Simulator (as static methods!)
		
	* Host class is accessible from all Layers and Components and contains TransportLayer and
	ContentStorage additionally
		
	* VERY IMPORTANT: Use Simulator.MILLISECOND_UNIT and Simulator.SECOND_UNIT etc. for time calculations:
	especially for timeouts, transmission latencies etc.
	* Specification of time points and durations in the config files: Now the preferred way is to specify them with UNIT, e.g. 10ms instead of 10000.
	The benefits are the increased readability and less errors.
